openapi: 3.0.3
info:
  title: POS API
  version: 0.1.0

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
    LoginResponse:
      type: object
      required: [access_token, token_type, user]
      properties:
        access_token: { type: string }
        token_type: { type: string, example: bearer }
        user: { $ref: '#/components/schemas/UserRead' }
    UserRead:
      type: object
      required: [id, email, role]
      properties:
        id: { type: integer }
        email: { type: string, format: email }
        role:
          type: string
          enum: [clerk, admin]

    ProductCreate:
      type: object
      required: [sku, name, unit_price]
      properties:
        sku: { type: string }
        name: { type: string }
        description: { type: string }
        unit_price:
          type: string
          pattern: '^\d+(\.\d{1,2})?$'
        tax_rate:
          type: string
          pattern: '^\d+(\.\d{1,2})?$'
          default: '10.00'
        is_active:
          type: boolean
          default: true
    ProductUpdate:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        unit_price:
          type: string
          pattern: '^\d+(\.\d{1,2})?$'
        tax_rate:
          type: string
          pattern: '^\d+(\.\d{1,2})?$'
        is_active: { type: boolean }
    ProductRead:
      allOf:
        - $ref: '#/components/schemas/ProductCreate'
        - type: object
          required: [id]
          properties:
            id: { type: integer }

    OrderItemCreate:
      type: object
      required: [product_id, quantity]
      properties:
        product_id: { type: integer }
        quantity: { type: integer, minimum: 1 }
    PaymentCreate:
      type: object
      required: [amount]
      properties:
        method:
          type: string
          enum: [cash, card, qr, other]
          default: cash
        amount:
          type: string
          pattern: '^\d+(\.\d{1,2})?$'
        transaction_id: { type: string }
    OrderCreate:
      type: object
      required: [items]   # user_id は任意
      properties:
        user_id: { type: integer }
        items:
          type: array
          items: { $ref: '#/components/schemas/OrderItemCreate' }
        payments:
          type: array
          items: { $ref: '#/components/schemas/PaymentCreate' }
        memo: { type: string }
    OrderItemRead:
      type: object
      required: [id, product_id, quantity, unit_price, line_total]
      properties:
        id: { type: integer }
        product_id: { type: integer }
        quantity: { type: integer }
        unit_price: { type: string }
        line_total: { type: string }
    PaymentRead:
      type: object
      required: [id, method, amount, created_at]
      properties:
        id: { type: integer }
        method:
          type: string
          enum: [cash, card, qr, other]
        amount: { type: string }
        transaction_id: { type: string }
        created_at: { type: string, format: date-time }
    OrderRead:
      type: object
      required:
        [id, order_no, user_id, subtotal, tax_total, total, paid_amount, change_amount, status, created_at, updated_at, items, payments]
      properties:
        id: { type: integer }
        order_no: { type: string }
        user_id: { type: integer }
        subtotal: { type: string }
        tax_total: { type: string }
        total: { type: string }
        paid_amount: { type: string }
        change_amount: { type: string }
        status:
          type: string
          enum: [draft, paid, refunded]
        memo: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        items:
          type: array
          items: { $ref: '#/components/schemas/OrderItemRead' }
        payments:
          type: array
          items: { $ref: '#/components/schemas/PaymentRead' }
    ReportSummary:
      type: object
      required: [total_products, total_orders, total_revenue, total_payments]
      properties:
        total_products: { type: integer }
        total_orders: { type: integer }
        total_revenue: { type: string }
        total_payments: { type: string }

paths:
  /healthz:
    get:
      summary: Health check
      responses:
        '200': { description: Service is healthy }

  /auth/login:
    post:
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200':
          description: Authenticated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoginResponse' }
        '401': { description: Invalid credentials }

  /products:
    get:
      summary: List products
      responses:
        '200':
          description: Product list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ProductRead' }
    post:
      summary: Create product
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductCreate' }
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductRead' }
        '401': { description: Unauthorized }
        '409': { description: SKU already exists }

  /products/{product_id}:
    put:
      summary: Update product
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: product_id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductUpdate' }
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductRead' }
        '401': { description: Unauthorized }
        '404': { description: Product not found }
    delete:
      summary: Delete product
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: product_id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Product deleted }
        '401': { description: Unauthorized }
        '404': { description: Product not found }

  /orders:
    get:
      summary: List orders
      responses:
        '200':
          description: Order list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/OrderRead' }
    post:
      summary: Create order
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderCreate' }
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OrderRead' }
        '400': { description: Invalid payload }
        '401': { description: Unauthorized }
        '404': { description: User or product not found }

  /reports:
    get:
      summary: Summary report
      responses:
        '200':
          description: Aggregated metrics
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ReportSummary' }
